name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, synchronize, labeled, unlabeled ]

jobs:

  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        uses: ./.github/actions/setup
        with:
          cache: true

      - name: Install CURL Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install curl libcurl4 libcurl4-openssl-dev -y

      - name: Build and Unit Test
        run: ./gradlew build -DRELEASE_SIGNING_ENABLED=false test allTests

      - name: Run Integraiton Tests
        run: (cd tests && ./gradlew allTests --no-parallel)

      - name: Cleanup cache
        uses: ./.github/actions/cleanup-cache

  find-version:
    runs-on: ubuntu-latest
    outputs:
      snapshot: ${{ (endsWith(steps.get_version.outputs.match, 'SNAPSHOT') || endsWith(steps.get_version.outputs.match, 'snapshot')) }}
      version: ${{ steps.get_version.outputs.match }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup
        uses: ./.github/actions/setup
        with:
          cache: false

      - name: Get version
        if: github.ref == 'refs/heads/main'
        id: get_version
        uses: rnett/find-regex@v1.1
        with:
          regex: 'version ?(?:=|:) ?"?([\w.\-_]+)"?'
          files: "build.gradle.kts,gradle.properties,build.gradle"
          commands: "./gradlew properties"

  create_staging_repository:
    runs-on: ubuntu-latest
    needs: [ find-version, test ]
    name: Create staging repository
    outputs:
      repository_id: ${{ steps.create.outputs.repository_id }}
    steps:
      - name: Print version
        run: |
          echo "Snapshot string: ${{ needs.find-version.outputs.snapshot }}"
          echo "Is release: ${{ needs.find-version.outputs.snapshot == 'false' }}"
      - id: create
        if: needs.find-version.outputs.snapshot == 'false'
        uses: nexus-actions/create-nexus-staging-repo@v1.1
        with:
          username: rnett
          password: ${{ secrets.SONATYPE_PASSWORD }}
          staging_profile_id: ${{ secrets.SONATYPE_PROFILE_ID }}
          description: Krosstalk ${{ github.repository }}/${{ github.workflow }}#${{ github.run_number }}

  publish:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    needs: [ create_staging_repository, test ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        uses: ./.github/actions/setup
        with:
          cache: true

      - name: Publish
        if: github.ref == 'refs/heads/main'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: rnett
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_sonatypeRepositoryId: ${{ needs.create_staging_repository.outputs.repository_id }}
          GRADLE_OPTS: -Xmx4096m
        run: ./gradlew publish --no-daemon --no-parallel

      - name: Cleanup cache
        uses: ./.github/actions/cleanup-cache


  publish-docs:
    runs-on: ubuntu-latest
    needs: [ find-version, publish ]

    steps:
      - uses: actions/checkout@v2
      - name: Setup
        uses: ./.github/actions/setup
        with:
          cache: true

      - name: Assemble
        run: ./gradlew assemble -DRELEASE_SIGNING_ENABLED=false

      - name: Clone past docs for release
        if: needs.find-version.outputs.snapshot == 'false'
        run: |
          git fetch
          git clone --depth 1 https://github.com/rnett/krosstalk.git --branch gh-pages --single-branch past-docs
          mkdir -p past-docs/old-releases/core
          mkdir -p past-docs/old-releases/plugins

      - name: Remove current docs from old docs
        run: |
          rm -rf past-docs/old-releases/core/${{ needs.find-version.outputs.version }}
          rm -rf past-docs/old-releases/core/*/older

          rm -rf past-docs/old-releases/plugins/${{ needs.find-version.outputs.version }}
          rm -rf past-docs/old-releases/plugins/*/older

      - name: List core versions
        run: ls -l past-docs/old-releases/core
      - name: List plugin versions
        run: ls -l past-docs/old-releases/plugins

      - name: Generate HTML Docs
        run: ./gradlew dokkaHtmlMultiModule -PgitBranch=$GITHUB_SHA -PcoreVersionDir=past-docs/old-releases/core -PpluginVersionDir=past-docs/old-releases/plugins

      - name: Stop gradle daemon
        run: ./gradlew --stop

      - name: Publish Core docs
        if: github.ref == 'refs/heads/main'
        uses: rnett/publish-docs@v2.3
        with:
          from: core/build/dokka/htmlMultiModule
          publish-to: '$latest/core,!old-releases/core/$version'
          version: ${{ needs.find-version.outputs.version }}
          restore: true
          message: Update Core docs for $version

      - name: Publish Plugin docs
        if: github.ref == 'refs/heads/main'
        uses: rnett/publish-docs@v2.3
        with:
          from: plugins/build/dokka/htmlMultiModule
          publish-to: '$latest/plugins,!old-releases/plugins/$version'
          version: ${{ needs.find-version.outputs.version }}
          restore: true
          message: Update Plugin docs for $version

      - name: Cleanup cache
        uses: ./.github/actions/cleanup-cache

  finalize:
    runs-on: ubuntu-latest
    needs: [ create_staging_repository, find-version, publish, publish-docs ]
    if: ${{ always() && needs.create_staging_repository.result == 'success' && needs.find-version.outputs.snapshot == 'false' }}
    steps:
      - name: Discard
        if: ${{ needs.publish-docs.result != 'success' }}
        uses: nexus-actions/drop-nexus-staging-repo@v1
        with:
          username: rnett
          password: ${{ secrets.SONATYPE_PASSWORD }}
          staging_repository_id: ${{ needs.create_staging_repository.outputs.repository_id }}
      - name: Release
        if: ${{ needs.publish-docs.result == 'success' }}
        uses: nexus-actions/release-nexus-staging-repo@v1.1
        with:
          username: rnett
          password: ${{ secrets.SONATYPE_PASSWORD }}
          staging_repository_id: ${{ needs.create_staging_repository.outputs.repository_id }}
          close_only: 'true'