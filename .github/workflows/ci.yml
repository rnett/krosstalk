name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew
          chmod +x tests/gradlew

      - name: Build and Unit Test
        run: ./gradlew build -DRELEASE_SIGNING_ENABLED=false
      - name: Run Integraiton Tests
        run: (cd tests && ./gradlew build)
      - name: Generate HTML Docs
        run: ./gradlew dokkaHtmlMultiModule -PsourceLinkBranch=$GITHUB_SHA


#      - id: install_gpg_key
#        if: github.ref == 'refs/heads/main'
#        name: Install gpg secret key
#        uses: rnett/import-gpg-key@v1.1
#        with:
#          secret-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
#          export-secring: true
#      - name: Publish
#        if: github.ref == 'refs/heads/main'
#        env:
#          ORG_GRADLE_PROJECT_mavenCentralRepositoryPassword: ${{ secrets.SONATYPE_PASSWORD }}
#          ORG_GRADLE_PROJECT_mavenCentralRepositoryUsername: ${{ secrets.SONATYPE_USERNAME }}
#          GRADLE_OPTS: -Xmx2048m -XX:MaxPermSize=512m
#        run: ./gradlew publish --no-daemon --no-parallel -Psigning.keyId=${{steps.install_gpg_key.outputs.key-id}} -Psigning.secretKeyRingFile=/home/runner/.gnupg/secring.gpg -Psigning.password=${{ secrets.OSSRH_GPG_KEY_PASSWORD }}
#      - name: Get version
#        if: github.ref == 'refs/heads/main'
#        id: get_version
#        uses: rnett/find-regex@v1.1
#        with:
#          regex: 'version ?(?:=|:) ?"?([\w.\-_]+)"?'
#          files: "gradle.properties,build.gradle.kts,build.gradle"
#          commands: "./gradlew properties"
#      - name: Publish docs
#        if: github.ref == 'refs/heads/main'
#        uses: rnett/publish-docs@v1.4
#        with:
#          from: compiler-plugin-utils/build/dokka/html
#          publish-to: version+latest
#          version: ${{ steps.get_version.outputs.match }}
#          restore: 'false'